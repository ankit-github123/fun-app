{"ast":null,"code":"import t, { Component as e, Children as n, createRef as i } from \"react\";\n\nfunction o(t, e, n) {\n  return e in t ? Object.defineProperty(t, e, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[e] = n, t;\n}\n\nfunction r(t) {\n  for (var e = 1; e < arguments.length; e++) {\n    var n = null != arguments[e] ? arguments[e] : {},\n        i = Object.keys(n);\n    \"function\" == typeof Object.getOwnPropertySymbols && (i = i.concat(Object.getOwnPropertySymbols(n).filter(function (t) {\n      return Object.getOwnPropertyDescriptor(n, t).enumerable;\n    }))), i.forEach(function (e) {\n      o(t, e, n[e]);\n    });\n  }\n\n  return t;\n}\n\nfunction s(t) {\n  return (s = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  })(t);\n}\n\nfunction a(t, e) {\n  return (a = Object.setPrototypeOf || function (t, e) {\n    return t.__proto__ = e, t;\n  })(t, e);\n}\n\nfunction u(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\n\nvar l = {\n  overflow: \"hidden\"\n},\n    h = {\n  overflow: \"hidden\"\n},\n    c = {\n  float: \"left\"\n},\n    d = function (d) {\n  function f() {\n    var t,\n        e,\n        r,\n        a = arguments;\n    !function (t, e) {\n      if (!(t instanceof f)) throw new TypeError(\"Cannot call a class as a function\");\n    }(this);\n\n    for (var l = arguments.length, h = new Array(l), c = 0; c < l; c++) {\n      h[c] = a[c];\n    }\n\n    e = !(r = (t = s(f)).call.apply(t, [this].concat(h))) || \"object\" != typeof r && \"function\" != typeof r ? u(this) : r, o(u(e), \"autoplayInterval\", void 0), o(u(e), \"touchStart\", {}), o(u(e), \"touchMove\", {}), o(u(e), \"isLongTouch\", !1), e.handleTransitionEnd = e.handleTransitionEnd.bind(u(e)), e.handleResize = e.handleResize.bind(u(e)), e.handleTouchEnd = e.handleTouchEnd.bind(u(e)), e.handleTouchMove = e.handleTouchMove.bind(u(e)), e.handleTouchStart = e.handleTouchStart.bind(u(e)), e.cloneChild = e.cloneChild.bind(u(e));\n    var d = n.count(e.props.children),\n        p = e.props.isInfinity && d > 1;\n    return e.wrapperRef = i(), e.state = {\n      index: p ? 1 : 0,\n      realIndex: 0,\n      slidesNumbers: p ? d + 2 : d,\n      customTransform: void 0,\n      isMounted: !1,\n      isInfinity: p,\n      isTransition: !1,\n      isTransitionInProgress: !1\n    }, e;\n  }\n\n  var p;\n  return function (t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), e && a(t, e);\n  }(f, e), (p = [{\n    key: \"componentDidMount\",\n    value: function value() {\n      var t = this,\n          e = this.props.onMount;\n      this.$wrapper = this.wrapperRef.current, this.setState({\n        width: this.getWrapperWidth(),\n        isMounted: !0\n      }), this.initAutoplay(), window.addEventListener(\"resize\", this.handleResize), e({\n        next: function next() {\n          return t.move(1);\n        },\n        prev: function prev() {\n          return t.move(-1);\n        },\n        moveTo: function moveTo(e) {\n          return \"number\" == typeof e ? t.moveTo({\n            index: e + 1\n          }) : void 0;\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function value(t, e) {\n      var n = this,\n          i = this.state,\n          o = i.index,\n          r = i.isInfinity,\n          s = i.slidesNumbers,\n          a = i.isTransitionInProgress;\n      r || o !== s - 1 || a || this.stopAutoplay(), r && (0 === o && e.isTransitionInProgress && !a && setTimeout(function () {\n        n.moveTo({\n          index: s - 2,\n          isTransition: !1,\n          isTransitionInProgress: !1\n        });\n      }, 17), s - 1 === o && e.isTransitionInProgress && !a && setTimeout(function () {\n        n.moveTo({\n          index: 1,\n          isTransition: !1,\n          isTransitionInProgress: !1\n        });\n      }, 17));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function value() {\n      this.stopAutoplay(), window.removeEventListener(\"resize\", this.handleResize);\n    }\n  }, {\n    key: \"getWrapperWidth\",\n    value: function value() {\n      return this.$wrapper && this.$wrapper.clientWidth;\n    }\n  }, {\n    key: \"getInnerWidth\",\n    value: function value() {\n      var t = this.state,\n          e = t.width,\n          n = t.slidesNumbers;\n      return e && n ? e * n : null;\n    }\n  }, {\n    key: \"cloneChild\",\n    value: function value(e) {\n      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      if (!e) return !1;\n      var i = r({}, c, {\n        width: this.state.width\n      });\n      return t.cloneElement(e, r({\n        style: r({}, i, e.props.style || {})\n      }, n));\n    }\n  }, {\n    key: \"getChildren\",\n    value: function value() {\n      var t,\n          e = this.state.isInfinity,\n          i = n.map(this.props.children, this.cloneChild);\n      return e ? [this.cloneChild(i[i.length - 1], {\n        key: \"clonedlast\"\n      })].concat(function (t) {\n        if (Array.isArray(t)) {\n          for (var e = 0, n = new Array(t.length); e < t.length; e++) {\n            n[e] = t[e];\n          }\n\n          return n;\n        }\n      }(t = i) || function (t) {\n        if (Symbol.iterator in Object(t) || \"[object Arguments]\" === Object.prototype.toString.call(t)) return Array.from(t);\n      }(t) || function () {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n      }(), [this.cloneChild(i[0], {\n        key: \"clonedfirst\"\n      })]) : i;\n    }\n  }, {\n    key: \"move\",\n    value: function value(t) {\n      var e = this.state,\n          n = e.index;\n      if (!t || n === e.slidesNumbers - 1 && t > 0 || 0 === n && t < 0 || e.isTransitionInProgress) return !1;\n      this.moveTo({\n        index: n + t,\n        customTransform: void 0\n      });\n    }\n  }, {\n    key: \"moveTo\",\n    value: function value() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      this.initAutoplay(), this.setState(function () {\n        return r({\n          isTransition: !0,\n          isTransitionInProgress: !0\n        }, t);\n      });\n    }\n  }, {\n    key: \"getRealIndex\",\n    value: function value() {\n      var t = this.state,\n          e = t.index;\n      return t.isInfinity ? t.slidesNumbers - 1 === e ? 0 : e - 1 : e;\n    }\n  }, {\n    key: \"calcTransform\",\n    value: function value(t) {\n      var e = this.state;\n      return t = t || e.index * e.width, {\n        transform: \"translate3d(\".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"-\").concat(t, \"px, 0, 0)\")\n      };\n    }\n  }, {\n    key: \"calcAnimation\",\n    value: function value() {\n      var t = this.props,\n          e = t.transitionTimingFunc,\n          n = this.state.isTransition,\n          i = t.transitionDelay / 100;\n      return i < 1e3 && (i = \".\".concat(i)), n ? {\n        transition: \"transform \".concat(i, \"s \").concat(e)\n      } : {};\n    }\n  }, {\n    key: \"stopAutoplay\",\n    value: function value() {\n      this.autoplayInterval = this.autoplayInterval ? clearInterval(this.autoplayInterval) : this.autoplayInterval;\n    }\n  }, {\n    key: \"initAutoplay\",\n    value: function value() {\n      var t = this,\n          e = this.props,\n          n = e.autoplayDelay;\n      if (!e.autoplay || this.state.slidesNumbers <= 1) return !1;\n      if (n < e.transitionDelay) throw new Error(\"`autoplayDelay` less than `transitionDelay`, fix it\");\n      this.stopAutoplay(), this.autoplayInterval = setInterval(function () {\n        return t.move(1);\n      }, n);\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function value(t) {\n      var e = this,\n          n = t.touches;\n      setTimeout(function () {\n        e.isLongTouch = !0;\n      }, this.props.longTouchDelay), this.touchStart = {\n        x: n[0].pageX,\n        y: n[0].pageY,\n        time: +new Date()\n      };\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function value(t) {\n      var e = t.scale,\n          n = t.touches,\n          i = this.state,\n          o = i.index,\n          r = i.width;\n\n      if (!(n.length > 1 || e && 1 !== e)) {\n        var s = n[0].pageX;\n        this.touchMove = {\n          x: s,\n          y: n[0].pageY,\n          time: +new Date(),\n          deltaX: o * r + (this.touchStart.x - s)\n        }, this.setState({\n          customTransform: this.touchMove.deltaX,\n          isTransition: !1\n        });\n      }\n    }\n  }, {\n    key: \"handleTouchEnd\",\n    value: function value() {\n      var t = this.state,\n          e = t.width,\n          n = t.index,\n          i = t.slidesNumbers,\n          o = t.isInfinity,\n          r = this.touchMove.deltaX,\n          s = Math.abs(n * e - r),\n          a = i - (n + 1) == 0,\n          u = r > n * e ? 1 : -1,\n          l = function l() {\n        return {\n          customTransform: void 0,\n          isTransition: !0\n        };\n      },\n          h = !this.isLongTouch || s > e / this.props.touchThreshold;\n\n      o ? h ? this.move(u) : this.setState(l) : h ? a && 1 === u ? this.setState(l) : this.move(u) : this.setState(l), this.touchStart = {}, this.touchMove = {}, this.isLongTouch = !1;\n    }\n  }, {\n    key: \"handleResize\",\n    value: function value() {\n      this.setState({\n        width: this.getWrapperWidth()\n      });\n    }\n  }, {\n    key: \"handleTransitionEnd\",\n    value: function value() {\n      var t = this.props.onTransitionEnd,\n          e = this.getRealIndex();\n      this.setState({\n        isTransitionInProgress: !1,\n        realIndex: e\n      }), \"function\" == typeof t && t({\n        index: e\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function value() {\n      var e = this.props,\n          n = e.className,\n          i = e.innerClassName,\n          o = this.state,\n          s = o.customTransform,\n          a = l,\n          u = h,\n          c = o.isMounted ? this.getChildren() : null,\n          d = this.getInnerWidth(),\n          f = this.calcTransform(s),\n          p = this.calcAnimation();\n      return t.createElement(\"div\", {\n        className: n,\n        style: a,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onTouchEnd: this.handleTouchEnd,\n        ref: this.wrapperRef\n      }, t.createElement(\"div\", {\n        style: r({}, u, {\n          width: d\n        }, f, p),\n        className: i,\n        onTransitionEnd: this.handleTransitionEnd\n      }, c));\n    }\n  }]) && function (t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }(f.prototype, p), f;\n}();\n\no(d, \"defaultProps\", {\n  autoplay: !1,\n  autoplayDelay: 5e3,\n  longTouchDelay: 250,\n  touchThreshold: 2,\n  transitionDelay: 500,\n  transitionTimingFunc: \"ease\",\n  children: void 0,\n  className: \"\",\n  innerClassName: \"\",\n  isInfinity: !1,\n  onMount: function onMount() {},\n  onTransitionEnd: void 0\n});\nexport default d;","map":null,"metadata":{},"sourceType":"module"}